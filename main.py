
import telebot
import configparser
import random
from telebot import types, custom_filters
from telebot.handler_backends import State, StatesGroup
from telebot.storage import StateMemoryStorage
from db_conn import get_db_connection
from db_interaction import (
    initialize_db, ensure_user_exists, fill_common_words_table,
    get_random_words, check_word_existence, add_word_to_user,
    delete_user_word, update_word_to_user_dict
)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
get_db_connection()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
initialize_db()

print('Telegram bot is OK!...')

config = configparser.ConfigParser()
config.read('settings.ini')
token_bot = config['Tokens']['tg_bot']

state_storage = StateMemoryStorage()
bot = telebot.TeleBot(token_bot, state_storage=state_storage)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
ensure_user_exists(user_id=bot.get_me().id, username=bot.get_me().username)


class Command:
    ADD_WORD = '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï'
    DELETE_WORD = '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üîô'
    NEXT = '–°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ ‚û°Ô∏è'


# –°–æ—Å—Ç–æ—è–Ω–∏—è
class MyStates(StatesGroup):
    target_word = State()
    translate_word = State()
    other_words = State()
    adding_new_word = State()
    saving_new_word = State()
    deleting_word = State()


# –û–±—â–∏–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
common_words = [
    ('Peace', '–ú–∏—Ä'), ('Green', '–ó–µ–ª—ë–Ω—ã–π'), ('White', '–ë–µ–ª—ã–π'),
    ('Hello', '–ü—Ä–∏–≤–µ—Ç'), ('Car', '–ú–∞—à–∏–Ω–∞'), ('Sky', '–ù–µ–±–æ'),
    ('Tree', '–î–µ—Ä–µ–≤–æ'), ('Book', '–ö–Ω–∏–≥–∞'), ('Love', '–õ—é–±–æ–≤—å'),
    ('Friend', '–î—Ä—É–≥'),('Plane', '–°–∞–º–æ–ª–µ—Ç'),('Ball','–ú—è—á'),('Game','–ò–≥—Ä–∞')
]

# –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å–ª–æ–≤–∞—Ä—è
fill_common_words_table(common_words)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@bot.message_handler(commands=['start', 'cards'])
def send_welcome(message):
    cid = message.chat.id
    username = message.chat.username or "Unknown"
    ensure_user_exists(cid, username)

    print("Starting bot for the first time...")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∏–∫–µ—Ä–∞ –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    sti = open('welcome_benny.png', 'rb')
    bot.send_sticker(cid, sti)
    bot.send_message(cid, f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {message.from_user.first_name}!\n–Ø {bot.get_me().first_name}! "
                          f"–ü—Ä–∏—Å—Ç—É–ø–∞–µ–º –∫ –∏–∑—É—á–µ–Ω–∏—é –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ üá¨üáß\n–¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∞–∂—ë—Ä,\n–∫–∞–∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, "
                          f"–∏ —Å–æ–±–∏—Ä–∞—Ç—å —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ–±—É—á–µ–Ω–∏—è.\n–î–ª—è —ç—Ç–æ–≥–æ –≤–æ—Å–ø—Ä–æ–ª—å–∑—É–π—Å—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏:\n"
                          f"- –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï\n"
                          f"- —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üîô\n"
                          f"–ü—Ä–∏—Å—Ç—É–ø–∏–º ‚¨áÔ∏è", parse_mode='html'
                     )

    create_cards(message)


def create_cards(message):
    cid = message.chat.id

    # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Å–ª–æ–≤–∞
    words = get_random_words(cid, limit=4)
    print(f"–°–ª—É—á–∞–π–Ω—ã–µ —Å–ª–æ–≤–∞: {words}")

    if not words or len(words) < 4:
        bot.send_message(cid, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ–≤!\n–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —á–µ—Ä–µ–∑ '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï'.")
        print("–°–ª–æ–≤ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫.")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–ª–µ–≤–æ–µ —Å–ª–æ–≤–æ –∏ –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    target_word, translate_word = words[0]
    other_words = [w[0] for w in words[1:]]

    # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
    options = other_words + [target_word]
    random.shuffle(options)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup = types.ReplyKeyboardMarkup(row_width=4)
    buttons = [types.KeyboardButton(option) for option in options]
    buttons.append(types.KeyboardButton(Command.NEXT))
    buttons.append(types.KeyboardButton(Command.ADD_WORD))
    buttons.append(types.KeyboardButton(Command.DELETE_WORD))
    markup.add(*buttons)

    main_menu_markup = types.ReplyKeyboardMarkup(row_width=2)
    main_menu_buttons = [
        types.KeyboardButton(Command.ADD_WORD),
        types.KeyboardButton(Command.DELETE_WORD),
        types.KeyboardButton(Command.NEXT)
    ]
    main_menu_markup.add(*main_menu_buttons)

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bot.set_state(user_id=message.from_user.id, chat_id=message.chat.id, state=MyStates.target_word)
    with bot.retrieve_data(user_id=message.from_user.id, chat_id=message.chat.id) as data:
        data['target_word'] = target_word
        data['translate_word'] = translate_word

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    greeting = f"–í—ã–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞:\nüá∑üá∫ {translate_word}"
    bot.send_message(cid, greeting, reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == Command.NEXT)
def next_word(message):
    create_cards(message)


@bot.message_handler(func=lambda message: message.text == Command.ADD_WORD)
def add_word_start(message):
    cid = message.chat.id
    bot.set_state(user_id=message.from_user.id, chat_id=cid, state=MyStates.adding_new_word)
    bot.send_message(cid, "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å, –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º:")


@bot.message_handler(state=MyStates.adding_new_word)
def add_translate_word(message):
    cid = message.chat.id
    word = message.text.strip().capitalize()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ª–æ–≤–∞ –Ω–µ—Ç –≤ –æ–±—â–µ–º —Å–ª–æ–≤–∞—Ä–µ
    if check_word_existence(word):
        bot.send_message(cid, "–≠—Ç–æ —Å–ª–æ–≤–æ —É–∂–µ –µ—Å—Ç—å –≤ –æ–±—â–µ–º —Å–ª–æ–≤–∞—Ä–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–æ–≤–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    with bot.retrieve_data(user_id=message.from_user.id, chat_id=cid) as data:
        data['target_word'] = word

    bot.set_state(user_id=message.from_user.id, chat_id=cid, state=MyStates.saving_new_word)
    bot.send_message(cid, f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è —Å–ª–æ–≤–∞ '{word}':")


@bot.message_handler(state=MyStates.saving_new_word)
def save_new_word(message):
    cid = message.chat.id
    translation = message.text.strip().capitalize()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –ø—É—Å—Ç–æ–π
    if not translation:
        bot.send_message(cid, "–ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥.")
        return

    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        with bot.retrieve_data(user_id=message.from_user.id, chat_id=cid) as data:
            target_word = data.get('target_word').capitalize()

        if not target_word:
            bot.send_message(cid, "–û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –Ω–∞—á–∞—Ç—å —Å /start.")
            bot.delete_state(user_id=message.from_user.id, chat_id=cid)
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –≤ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        add_word_to_user(message.from_user.id, target_word, translation)

        bot.send_message(cid, f"–°–ª–æ–≤–æ '{target_word}' –∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥ '{translation}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!")
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–ª–æ–≤–∞: {e}")
        bot.send_message(cid, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–ª–æ–≤–∞: {e}")
    finally:
        bot.delete_state(user_id=message.from_user.id, chat_id=cid)

    send_main_menu(cid)


@bot.message_handler(func=lambda message: message.text == Command.DELETE_WORD)
def delete_word_start(message):
    cid = message.chat.id

    bot.set_state(user_id=message.from_user.id, chat_id=message.chat.id, state=MyStates.deleting_word)
    bot.send_message(cid, "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å, –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º:")


@bot.message_handler(state=MyStates.deleting_word)
def delete_word(message):
    cid = message.chat.id
    word_to_delete = message.text.strip().capitalize()

    # –£–¥–∞–ª—è–µ–º —Å–ª–æ–≤–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    word_to_delete = delete_user_word(message.from_user.id, word_to_delete)

    if word_to_delete:
        bot.send_message(cid, f"–°–ª–æ–≤–æ '{word_to_delete[0]}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –≤–∞—à–µ–≥–æ —Å–ª–æ–≤–∞—Ä—è!")
        print(f"–£–¥–∞–ª–µ–Ω–æ —Å–ª–æ–≤–æ: {word_to_delete[0]}")
    else:
        bot.send_message(cid, "–°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –≤–∞—à–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º —Å–ª–æ–≤–∞—Ä–µ.")
        print("–°–ª–æ–≤–æ –Ω–µ —É–¥–∞–ª–µ–Ω–æ.")
    bot.delete_state(user_id=message.from_user.id, chat_id=message.chat.id)
    send_main_menu(cid)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
def send_main_menu(chat_id):
    markup = types.ReplyKeyboardMarkup(row_width=2)
    buttons = [
        types.KeyboardButton(Command.ADD_WORD),
        types.KeyboardButton(Command.DELETE_WORD),
        types.KeyboardButton(Command.NEXT)
    ]
    markup.add(*buttons)
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)


@bot.message_handler(func=lambda message: True, content_types=['text'])
def message_reply(message):
    user_response = message.text.strip()
    print(f"–û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_response}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    state = bot.get_state(user_id=message.from_user.id, chat_id=message.chat.id)
    print(f"–ü–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}, —á–∞—Ç {message.chat.id}: {state}")

    if state != MyStates.target_word.name:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞! –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start.")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        target_word = data.get('target_word')
        translate_word = data.get('translate_word')
        attempts = data.get('attempts', 0)
        print(f"–î–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–π: target_word={target_word}, translate_word={translate_word}")

    if not target_word or not translate_word:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –Ω–∞—á–∞—Ç—å —Å /start.")
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    if user_response.strip().lower() == target_word.strip().lower():
        try:
            update_word_to_user_dict(message.from_user.id, target_word, translate_word)
            bot.send_message(message.chat.id, f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!\n{target_word} => {translate_word}!")
        except ValueError as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞: {e}")
        data.clear()
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ
    attempts += 1
    data['attempts'] = attempts
    if attempts < 3:
        bot.send_message(
            message.chat.id, f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.\n–ü–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞: {translate_word}\n"
                             f"–ü–æ–ø—ã—Ç–∫–∞ {attempts} –∏–∑ 3."
        )
    else:
        bot.send_message(
            message.chat.id, f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –ø–æ–ø—ã—Ç–∫–∏.\n"f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥: {target_word}"
        )
        data.clear()


bot.add_custom_filter(custom_filters.StateFilter(bot))
bot.infinity_polling(timeout=10, long_polling_timeout=5, skip_pending=True)